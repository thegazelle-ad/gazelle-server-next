generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model articles {
  id                    Int                     @id @default(autoincrement()) @db.UnsignedInt
  slug                  String                  @unique(map: "articles_slug_unique") @db.VarChar(255)
  title                 String                  @db.VarChar(255)
  markdown              String?                 @db.LongText
  html                  String?                 @db.LongText
  image_url             String?                 @db.VarChar(255)
  teaser                String?                 @db.VarChar(255)
  views                 Int                     @default(0) @db.UnsignedInt
  created_at            DateTime                @db.DateTime(0)
  published_at          DateTime?               @db.DateTime(0)
  is_interactive        Boolean                 @default(false)
  category_id           Int?                    @db.UnsignedInt
  categories            categories?             @relation(fields: [category_id], references: [id], map: "articles_category_id_foreign")
  articles_tags         articles_tags[]
  authors_articles      authors_articles[]
  interactive_meta      interactive_meta?
  issues_articles_order issues_articles_order[]

  @@index([category_id], map: "articles_category_id_foreign")
  @@index([markdown], map: "markdown")
  @@index([title], map: "title")
}

model articles_tags {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  article_id Int      @db.UnsignedInt
  tag_id     Int      @db.UnsignedInt
  articles   articles @relation(fields: [article_id], references: [id], onDelete: Cascade, map: "posts_tags_article_id_foreign")
  tags       tags     @relation(fields: [tag_id], references: [id], onUpdate: Restrict, map: "posts_tags_tag_id_foreign")

  @@index([article_id], map: "posts_tags_post_id_foreign")
  @@index([tag_id], map: "posts_tags_tag_id_foreign")
}

model authors_articles {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  author_id  Int      @db.UnsignedInt
  article_id Int      @db.UnsignedInt
  articles   articles @relation(fields: [article_id], references: [id], onDelete: Cascade, map: "authors_posts_article_id_foreign")
  staff      staff    @relation(fields: [author_id], references: [id], onDelete: Cascade, map: "authors_posts_author_id_foreign")

  @@index([article_id], map: "authors_posts_post_id_foreign")
  @@index([author_id, article_id], map: "uniqueness_index")
}

model categories {
  id                      Int                       @id @default(autoincrement()) @db.UnsignedInt
  slug                    String                    @unique(map: "categories_slug_unique") @db.VarChar(255)
  name                    String                    @unique(map: "categories_name_unique") @db.VarChar(255)
  articles                articles[]
  issues_categories_order issues_categories_order[]
}

model info_pages {
  id    Int    @id @default(autoincrement()) @db.UnsignedInt
  slug  String @unique(map: "info_pages_slug_unique") @db.VarChar(255)
  title String @db.VarChar(255)
  html  String @db.LongText
}

model interactive_meta {
  id       Int      @id @db.UnsignedInt
  html     String   @db.LongText
  js       String?  @db.LongText
  css      String?  @db.LongText
  articles articles @relation(fields: [id], references: [id], onDelete: Cascade, map: "interactive_meta_id_foreign")
}

model issues {
  id                      Int                       @id @default(autoincrement()) @db.UnsignedInt
  name                    String                    @db.VarChar(255)
  published_at            DateTime?                 @db.Date
  issue_number            Int                       @unique(map: "issues_issue_order_unique") @db.UnsignedInt
  issues_articles_order   issues_articles_order[]
  issues_categories_order issues_categories_order[]
}

model issues_articles_order {
  id            Int      @id @default(autoincrement()) @db.UnsignedInt
  issue_id      Int      @db.UnsignedInt
  type          Int      @db.UnsignedInt
  article_id    Int      @db.UnsignedInt
  article_order Int      @default(0) @db.UnsignedInt
  articles      articles @relation(fields: [article_id], references: [id], onDelete: Cascade, map: "issues_posts_order_article_id_foreign")
  issues        issues   @relation(fields: [issue_id], references: [id], onDelete: Cascade, map: "issues_posts_order_issue_id_foreign")

  @@index([issue_id], map: "issues_posts_order_issue_id_foreign")
  @@index([article_id], map: "issues_posts_order_post_id_foreign")
}

model issues_categories_order {
  id               Int        @id @default(autoincrement()) @db.UnsignedInt
  issue_id         Int        @db.UnsignedInt
  category_id      Int        @db.UnsignedInt
  categories_order Int        @default(0) @db.UnsignedInt
  categories       categories @relation(fields: [category_id], references: [id], onDelete: Cascade, map: "issues_categories_order_category_id_foreign")
  issues           issues     @relation(fields: [issue_id], references: [id], onDelete: Cascade, map: "issues_categories_order_issue_id_foreign")

  @@index([category_id], map: "issues_categories_order_category_id_foreign")
  @@index([issue_id, category_id, categories_order], map: "uniqueness_index")
}

model knex_migrations {
  id             Int      @id @default(autoincrement()) @db.UnsignedInt
  name           String?  @db.VarChar(255)
  batch          Int?
  migration_time DateTime @default(now()) @db.Timestamp(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model knex_migrations_lock {
  is_locked Int?

  @@ignore
}

model semesters {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  name        String        @unique(map: "semesters_name_unique") @db.VarChar(255)
  date        DateTime      @unique(map: "semesters_date_unique") @db.Date
  teams_staff teams_staff[]
}

model staff {
  id               Int                @id @default(autoincrement()) @db.UnsignedInt
  slug             String             @unique(map: "authors_slug_unique") @db.VarChar(255)
  name             String             @db.VarChar(255)
  job_title        String?            @db.VarChar(255)
  biography        String?            @db.VarChar(1000)
  image_url        String?            @db.VarChar(255)
  authors_articles authors_articles[]
  teams_staff      teams_staff[]
}

model tags {
  id            Int             @id @default(autoincrement()) @db.UnsignedInt
  name          String          @db.VarChar(255)
  slug          String          @unique(map: "tags_slug_unique") @db.VarChar(255)
  articles_tags articles_tags[]
}

model teams {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  slug        String        @unique(map: "teams_slug_unique") @db.VarChar(255)
  name        String        @unique(map: "teams_name_unique") @db.VarChar(255)
  teams_staff teams_staff[]
}

model teams_staff {
  id          Int        @id @default(autoincrement()) @db.UnsignedInt
  team_id     Int        @db.UnsignedInt
  staff_id    Int        @db.UnsignedInt
  team_order  Int        @default(0) @db.UnsignedInt
  staff_order Int        @default(0) @db.UnsignedInt
  semester_id Int?       @db.UnsignedInt
  staff       staff      @relation(fields: [staff_id], references: [id], onDelete: Cascade, map: "teams_authors_author_id_foreign")
  semesters   semesters? @relation(fields: [semester_id], references: [id], onDelete: Restrict, map: "teams_authors_semester_id_foreign")
  teams       teams      @relation(fields: [team_id], references: [id], onDelete: Cascade, map: "teams_authors_team_id_foreign")

  @@index([staff_id], map: "teams_authors_author_id_foreign")
  @@index([semester_id], map: "teams_authors_semester_id_foreign")
  @@index([team_id, staff_id], map: "uniqueness_index")
}
